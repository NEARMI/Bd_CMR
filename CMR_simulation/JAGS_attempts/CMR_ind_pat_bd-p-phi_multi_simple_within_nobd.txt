model {

####
## Priors
####

beta_phi[1]    ~ dnorm(0, 0.368)
beta_phi[2]    ~ dnorm(0, 0.368)
beta_p[1]      ~ dnorm(0, 0.368)
beta_p[2]      ~ dnorm(0, 0.368)
beta_timegaps  ~ dnorm(0, 0.368)

gamma[1]       ~ unif(0, 1)
gamma[2]       ~ unif(0, 1)

####
## Survival and Detection
####

for (i in 1:n_ind) {
 for (p in 1:n_periods) {
  for (t in 1:n_occ_min1) {
          
  phi[i, t, p] = ilogit(
     beta_phi[1] + 
     beta_timegaps * time_gaps[t, p] + 
     beta_phi[2] * X_bd[i, sampling_events[t], p]
  )

 }

 for (t in 1:n_occasions) {

  pr[i, t, p] = ilogit(
     beta_p[1] + 
     beta_p[2] * X_bd[i, sampling_events[t], p]
  )
 
  }
 }
}


####
## Chi
####

for (i in 1:n_ind) {

 chi[i, n_occasions, p] = 1      

for (p in 1:n_periods) {
 for (t in 1:n_occ_min1) { 

chi[i, n_occasions - t, p] = 
  (1 - phi[i, n_occasions - t, p]) + 
  phi[i, n_occasions - t, p] * 
  (1 - pr[i, n_occasions - t, p]) * 
  chi[i, n_occasions - t + 1, p]		

  }
 }
}


####
## Among Season Process
####

 for (i in 1:n_ind) {

  z[i, 1] ~ dbern(gamma[1])  ## want this to be a simplex

  for (p in 2:n_periods) {

    survived[i, p]    = z[i, p-1] * PHI[i, p-1]

    recruited[i, p]   = (1 - z[i, p-1]) * recruited[i, p] * gamma[p]   

    transition[i, p]  = survived[i, p] + recruited[i, p]

    z[i, p]           ~ dbern(transition[i, p])

 }
}

## fill in which seasons we think the individual is alive?
 ## if we catch it in period 2 and we think its alive in period 1 then all entries of living period 1 must be 1
 ## if we catch it in period 1 but not period 2, did the individual die in period 1 or sometime in the future
## --> Want to consider both of these possibilities to appropriately constrain both survival and detection 


####
## Capture and Detection within season to constrain effects of covariates
####

## Use ind_this_season which is a vector of all of the individuals caught in each season

 for (p in 1:n_periods) {
  for (i in 1:n_ind) {
   for (t in 2:last[i, p]) {

   living[i, t, p]   ~ dbern(phi[i, t - 1, p])  
   PHI[i, p]         = PHI[i, p] * phi[i, t, p] 

  }

  for (t in 1:last[i]) {

   y[i, t, p]        ~ dbern(pr[i, t, p])
  
  } 

   chi_restraint[i]  ~ dbern(chi[i, last[i], p])  

 }

}


}


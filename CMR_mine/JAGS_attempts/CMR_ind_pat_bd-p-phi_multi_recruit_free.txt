model {

####
## Data
####

# int<lower=1> n_periods;			    // Total number of seasons/years (the "on" period where sampling occurs) over which individuals are captured
# int<lower=1> n_ind;				    // Total number of individuals caught (ever, over all years)
# int<lower=n_periods> n_times;		    	    // Sum of total time points modeled within each season across all seasons/years  		
# int<lower=n_periods> n_occasions;		    // Total number of sampling days (a subset of times) across all seasons/years 
# int<lower=1> n_occ_min1;			    // ^^ just throwing out the very last sampling day
	
# int<lower=0> time[n_times];		 	    // Vector indicating time (e.g., weeks) *!within each season!*

# int<lower=0> sampling_events[n_occasions]; 	    // Indices from 1:n_times on which a sampling event occurred
# int<lower=0> time_gaps[n_occ_min1];  	 	    // Elapsed time between each sampling event 

# int<lower=0,upper=1> offseason[n_occ_min1];	    // Vector indicating the last sampling periods of each season which gains offseason characteristics
	  
# int y[n_ind, n_occasions];		    	    // Capture-history observation matrix of bd-unmeasured individuals

# matrix[n_ind, n_occasions] X_bd;	   	    // Covariate
# int<lower=0> periods[n_times];		    // Vector designating periods for bd model (all times)
# int<lower=0> periods_occ[n_occasions];	    // Vector designating periods for observational model (all occasions)

# matrix[n_ind, n_periods] alpha;		    // Values for the dirichlet prior for the simplex of recruitment for individuals not seen in the first round


####
## Parameters
####

# vector[2] beta_phi;                  		// intercept and slope coefficient for survival
# vector[2] beta_p;				// intercept and slope coefficient for detection
# real beta_timegaps;				// coefficient to control for the variable time between sampling events
# real beta_offseason;				// season survival probability

# vector[3] beta_bd;				// intercept and two slope coefficients for grand mean change in bd over time
# real beta_period;				// difference in load between primary n_periods (years)

# real<lower=0> bd_delta_sigma;			// change in Bd by individual (normal random effect variance)
# real bd_delta_eps[n_ind];			// the conditions modes of the random effect (each individual's intercept (for now))

# real<lower=0> bd_obs;    			// observation noise for observed Bd compared to underlying state

# simplex[n_periods] gamma[n_ind];		// probability of each individual seen in subsequent periods actually having been in the population in the previous period


####
## Transformed parameters
####

# matrix<lower=0,upper=1>[n_ind, n_occ_min1] phi;      // survival from t to t+1
# matrix<lower=0,upper=1>[n_ind, n_occasions] p;       // detection at time t
# real bd_ind[n_ind];                                  // Individual random effect deviates


####
## Latent States
####
 
# matrix[n_ind, n_times] X;        // Estimated "true" bd for all of the caught individuals with no bd measured		
# matrix[n_ind, n_occasions] z;    // true latent state of whether or not we think an individual is present or not in the population
# matrix[n_ind, n_periods] rec;	   // recruitment of individuals in the offseasons
# matrix[n_ind, n_occasions] cp;   // latent detection matrix compared to y
 

####
## Priors
####

beta_phi[1]    ~ dnorm(0, 1/25)
beta_phi[2]    ~ dnorm(0, 1/25)
beta_p[1]      ~ dnorm(0, 1/25)
beta_p[2]      ~ dnorm(0, 1/25)
beta_bd[1]     ~ dnorm(0, 1/25)
beta_bd[2]     ~ dnorm(0, 1/25)
beta_bd[3]     ~ dnorm(0, 1/25)
beta_period    ~ dnorm(0, 1/25)
beta_timegaps  ~ dnorm(0, 1/25)
beta_offseason ~ dnorm(0, 1/25)
#bd_obs         ~ dt(0, pow(2.5,-2), 1)
#bd_delta_sigma ~ dt(0, pow(2.5,-2), 1)

tau[1] ~ dgamma(1.0E-3, 1.0E-3)
tau[2] ~ dgamma(1.0E-3, 1.0E-3)
bd_obs         = 1.0/sqrt(tau[1])
bd_delta_sigma = 1.0/sqrt(tau[2])

for (i in 1:n_ind) {
  bd_delta_eps[i]   ~ dnorm(0, 1/4)
 }


for (i in 1:n_ind) {
 for (t in 1:n_periods) {
  gamma[i, t] ~ dunif(0, 1)
 }
}


####
## Bd Submodel
####

for (i in 1:n_ind) {
 bd_ind[i]  = beta_bd[1] + bd_delta_sigma  * bd_delta_eps[i]
  
  for (t in 1:n_times) {
    X[i, t] = bd_ind[i] + beta_period * periods[t] + beta_bd[2] * time[t] + beta_bd[3] * time_sq[t]
   }
 }


####
## Survival and Detection
####

for (i in 1:n_ind) {

 for (t in 1:n_occ_min1) {
          
 phi[i, t] = ilogit(
  beta_phi[1]                   + 
  beta_timegaps  * time_gaps[t] +
  beta_offseason * offseason[t] +	
  beta_phi[2]    * X[i, sampling_events[t]]
 )

 }

 for (t in 1:n_occasions) {

  p[i, t]    = ilogit(
   beta_p[1] + 
   beta_p[2] * X[i, sampling_events[t]]
  )

 }

}


####
## Bd Process and Data Model
####

 for (i in 1:n_ind) {
  for (t in 1:n_times) {
      X_bd[i, t] ~ dnorm(X[i, t], bd_obs)       
    }
   }
 

####
## Capture Model
####

 for (i in 1:n_ind) {

  ## And in all future seasons
  for (t in 1:n_periods) {
   recruited[i, t] ~ dbern(gamma[i, t])
  }
  
  ## Recruitment in the first season       
 ## z[i, 1] ~ dbern(gamma[i, 1]) 
    z[i, 1] = recruited[i, 1]

  ## Then at each future time step the latent state of z is updated based on:
   ## 1) did the individual survive? -OR-
   ## 2) did it recruit into the population if it wasn't there prior
    
    for (t in 2:n_occasions) {

      survived[i, t]    = z[i, t-1] * phi[i, t-1]
      immigrated[i, t]  = (1 - z[i, t-1]) * offseason[t] * recruited[i, periods_occ[t]]
      present[i, t]     = survived[i, t] + immigrated[i, t]
     
      z[i, t]  ~ dbern(present[i, t])
      cp[i, t] = z[i, t] * p[i, t]
      y[i, t]  ~ dbern(cp[i, t])

    }
  }


}

